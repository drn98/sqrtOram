#include "linear_scan_oram.oh"

LinearScanOram* lso_initialize(int N, int data_size) {
   LinearScanOram * res =  calloc(sizeof(LinearScanOram),1);
   res->data_size = data_size;
   res->N = N;
   res->data = calloc(sizeof(obliv bool*), N);
   for(int i = 0; i < N; ++i)
      res->data[i] = calloc(sizeof(obliv bool), data_size);
   int logN = 1;
   while( (1<<logN)< N )
      logN <<=1;
   res -> index_size = logN;
   return res;
}

void lso_release(LinearScanOram* oram) {
   for(int i = 0; i < oram->N; ++i)
      free(oram->data[i]);
   free(oram->data);
   free(oram);
}

void lso_write(LinearScanOram * oram, obliv int index, obliv bool* data)  obliv {
   index = bit_mask(index, oram->index_size);
   for(int i = 0; i < oram->N; ++i) {
      obliv if (index == i)
         for(int j = 0; j < oram->data_size; ++j)
            oram->data[i][j] = data[j];
   }
}

void lso_read(LinearScanOram * oram, obliv int index, obliv bool* data) obliv {
   index = bit_mask(index, oram->index_size);
   for(int j = 0; j < oram->data_size; ++j)
      data[j] = oram->data[0][j];
   for(int i = 1; i < oram->N; ++i) {
      obliv if (index == i)
         for(int j = 0; j < oram->data_size; ++j)
            data[j] = oram->data[i][j];
   }
}
