#include "search.h"
#include <util.h>
#include <oram.oh>
#include <linearoram.oh>
#include <math.h>

typedef obliv bool (* block_lt_function)(void * blk, void * arg) obliv;
int rangeHalf(int x) { return x>1?(x+1)/2:0; }

obliv int binary_search(void* dest, OcOram* ram, 
                        block_lt_function fn, void* arg) {
	int range;
        if(ram->n==0) return 0;

        // In the obliv world, we don't know exactly how many iterations
        // are required. So there is a risk that we might invoke ocOramRead()
        // on out of bound index like n.
	obliv int iimin = 0;
	obliv int iimax = ram->n - 1;
	obliv int less;
	void * temp_element = calloc(1, ram->cpy->eltsize);
	for (range=ram->n-1; range; range=rangeHalf(range)) {
		obliv int iimid = (iimin + iimax) / 2;
                ocOramRead(temp_element, ram, iimid);
		less = fn(temp_element, arg);
                obliv if(less & iimin<iimax) iimin = iimid+1;
                else iimax=iimid;
	}
        // At this point, we have iimin==iimax
        // But, if iimin==n-1, we may need to check one more element.
        ocOramRead(dest, ram, iimin);
        obliv if(fn(dest, arg)) iimin++;
	free(temp_element);
	return iimin;
}

obliv int linear_search(void* dest, OcLinearOram* ram,
                        block_lt_function fn, void* arg) {
	obliv int index = ram->super.n;
        obliv bool done = false;
	OcCopy* cpy = ram->super.cpy;
	for (int ii = 0; ii < ram->super.n; ii++) {
		void * elt = ocCopyElt(cpy,ram->data,ii);
                obliv bool less = fn(elt,arg);
		obliv if (!done & !less) {
			ocCopy(cpy,dest,elt);
			index = ii;
                        done = true;
		}
	}
	return index;
}

static int cmpint(void* a,void* b) { return *(int*)a-*(int*)b; }
obliv bool intLessThan(void* a,void* b) obliv
  { return *(obliv int*)a<*(obliv int*)b; }

// Needs to go into util.oc
#include<sqrtoram.oh>
#include<circuit_oram.oh>
OcOram* benchmarkOram(void* data,int n)
{ if(cmdOramType==oramTypeLin)
    return &ocLinearOramNew(&ocCopyInt,data,n)->super;
  else if(cmdOramType==oramTypeSqrt)
    return CAST(ocSqrtOramNew(&ocCopyInt,data,n));
  else
    // Despite the name, this returns an *uninitialized* ORAM
    // Initializing would take too long
    return &ckt_initialize(n,&ocCopyInt)->super;
}

// Does the input verification/initialization that require both parties.
void searchProto(void* varg)
{
  SearchIO* arg=varg;
  matchedBroadcastInt(&arg->n,arg->n!=-1,"size");
  matchedBroadcastInt(&arg->axc,arg->axc!=-1,"axcount");
  matchedBroadcastInt(&cmdOramType,true,"oram type");
  if(!arg->data)
  { arg->data=randomIntArray((1<<31)-1,arg->n);
    qsort(arg->data,arg->n,sizeof(int),cmpint);
  }
  if(!arg->indices) arg->indices=randomIntArray(arg->n,arg->axc);

  obliv int *in  = calloc(arg->n,sizeof*in);
  obliv int *pos = calloc(arg->axc,sizeof*pos);
  obliv int *out = calloc(arg->axc,sizeof*out);
  obliv int x;
  int k;
  feedOblivIntArray(in,arg->data,arg->n,1);
  feedOblivIntArray(pos,arg->indices,arg->axc,2);
  if(cmdOramType==oramTypeLin)
  { OcLinearOram *ram = ocLinearOramNew(&ocCopyInt,in,arg->n);
    for(k=0;k<arg->axc;++k)
      out[k]=linear_search(&x,ram,intLessThan,pos+k);
    ocOramRelease(&ram->super);
  }else
  {
    OcOram *ram = benchmarkOram(in,arg->n);
    for(k=0;k<arg->axc;++k)
      out[k]=binary_search(&x,ram,intLessThan,pos+k);
    ocOramRelease(ram);
  }
  if(!arg->outputs) arg->outputs=malloc(arg->axc*sizeof(int));
  for(k=0;k<arg->axc;++k) revealOblivInt(arg->outputs+k,out[k],1);
  for(k=0;k<arg->axc;++k) revealOblivInt(arg->outputs+k,out[k],2);
  free(out); free(pos); free(in);
}
